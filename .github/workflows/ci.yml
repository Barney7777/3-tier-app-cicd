name: Yelp Camp Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  cache-dependencies:
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: ./
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    
    steps:
    - name: Checkout
      uses: actions/Checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js ${{ matrix.node-version }} - ${{ matrix.architecture }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        architecture: ${{ matrix.architecture }}
    
    - name: cache-dependencies
      uses: actions/cache@v4
      id: cache-node-modules
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install project dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm i
    
    - name: unit test
      run: npm test
  
  vulnerability-scan:
  needs: cache-dependencies
  runs-on: ubuntu-latest
  # defaults:
  #     run:
  #       working-directory: ./
  strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
  
  steps:
    - name: Checkout
      uses: actions/Checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install project dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm i
    
    - name: Setup SonarQube
      uses: warchant/setup-sonar-scanner@v8
    - name: SAST with SonarCloud
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        # projectBaseDir: .
        args: >
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.sources=.
          -Dsonar.verbose=true
    
    - name: Install Trivy
      run: |
         curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - name: Trivy FS Scan
      run: |
        echo "Scanning File"
        trivy fs --format table -o trivy-fs-results.html .
    - name: Archive Trivy FS Scan Results
      uses: actions/upload-artifact@v4
      with: 
        name: trivy-fs-results.html
        path: trivy-fs-results.html
  
  build:
    needs: vulnerability-scan
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      IMAGE_TAG: ${{ github.sha }}
      AWS_DEFAULT_REGION: ap-southeast-2
    
    steps:
    - name: Checkout
      uses: actions/Checkout@v4
      with:
        fetch-depth: 0
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v3
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set ECR_REGISTRY env var
      run: |
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
    
    - name: Build Docker Image
      id: build-image
      run: |
        echo "Building Docker Image"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    
    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - name: Trivy Image Scan
      run: |
        echo "Scanning Docker Image"
        trivy image --format table -o trivy-image-report.html $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Archive Trivy Image Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-image-report.html
        path: trivy-image-report.html
    
    - name: Push Docker Image To Amazon ECR
      id: push-image
      run: |
        echo "Pushing Docker Image"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Set IMAGE env var
      run: |
        echo "IMAGE=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_ENV
    
    outputs:
      ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
      IMAGE: ${{ env.IMAGE }}
  
  Update_k8s_manifests:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: show env var in build step
        run: |
          echo ${{env.ECR_REGISTRY}}
          echo ${{env.IMAGE}}




